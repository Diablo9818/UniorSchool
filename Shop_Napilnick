using System.Linq;

class Program
{
    static void Main(string[] args)
    {
        Good iPhone12 = new Good("IPhone 12");
        Good iPhone11 = new Good("IPhone 11");

        Console.WriteLine(iPhone12.Name);
        Console.WriteLine(iPhone11.Name);

        Warehouse warehouse = new Warehouse();

        Shop shop = new Shop(warehouse);

        warehouse.Delive(iPhone12, 10);
        warehouse.Delive(iPhone11, 1);

        ////Вывод всех товаров на складе с их остатком
        warehouse.PrintGoods();

        Cart cart = shop.Cart();
        cart.Add(iPhone12, 4);
        cart.Add(iPhone11, 3); //при такой ситуации возникает ошибка так, как нет нужного количества товара на складе

        ////Вывод всех товаров в корзине
        cart.PrintGoods();

        Console.WriteLine(cart.Order().Paylink);

        cart.Add(iPhone12, 9); //Ошибка, после заказа со склада убираются заказанные товары
    }
}

public interface IWarehouse
{
    void Remove(Good good, int amount);
    bool HasEnough(Good good, int quantity);
}

public class Good
{
    public Good(string name)
    {
        if (name == null)
            throw new ArgumentNullException($"{nameof(name)} is null");

        Name = name;
    }

    public string Name { get; }
}

public class Warehouse: IWarehouse
{
    private readonly Dictionary<Good, int> _storage = new Dictionary<Good, int>();

    public void Remove(Good good, int amount)
    {
        if (amount < 0)
            throw new ArgumentOutOfRangeException($"{nameof(amount)} can't be less than zero.");

        if (good == null)
            throw new ArgumentNullException($"{nameof(good)} is null");

        if (!_storage.ContainsKey(good))
            return;

        if (_storage[good] > 0)
            _storage[good] -= amount;

        _storage.Remove(good);
    }

    public void PrintGoods()
    {
        Console.WriteLine("This Warehouse has:");

        foreach (var item in _storage)
            Console.WriteLine($"{item.Key.Name}: {item.Value}");
    }


    public bool HasEnough(Good good, int quantity)
    {
        return _storage.ContainsKey(good) && _storage[good] >= quantity;
    }

    public void Delive(Good good, int amount)
    {
        if (amount <= 0)
            throw new ArgumentOutOfRangeException($"{nameof(amount)} can't be negative.");

        if (good == null)
            throw new ArgumentNullException($"{nameof(good)} is null");

        if (!_storage.ContainsKey(good))
            _storage[good] = 0;

        _storage[good] += amount;
    }
}

public class Shop
{
    private readonly Warehouse _warehouse;

    public Shop(Warehouse warehouse)
    {
        _warehouse = warehouse ?? throw new ArgumentNullException($"{nameof(warehouse)} is null");
    }

    public Cart Cart()
    {
        return new Cart(_warehouse);
    }
}

public class Cart
{
    private readonly Dictionary<Good, int> _cartSpace = new Dictionary<Good, int>();
    private readonly IWarehouse _warehouse;

    public Cart(IWarehouse warehouse)
    {
        _warehouse = warehouse ?? throw new ArgumentNullException($"{nameof(warehouse)} is null");
    }

    public void Add(Good good, int ammount)
    {
        if (ammount <= 0)
            throw new ArgumentOutOfRangeException($"{nameof(ammount)} can't be negative.");

        if (good == null)
            throw new ArgumentNullException($"{nameof(good)} is null");

        if (!_warehouse.HasEnough(good, ammount))
            throw new ArgumentException($"Not enough {good.Name} in stock.");

      
            if (!_cartSpace.ContainsKey(good))
                _cartSpace[good] = 0;

        _cartSpace[good] += ammount;

    }

    public void PrintGoods()
    {
        Console.WriteLine("This Cart has:");

        foreach (var item in _cartSpace)
            Console.WriteLine($"{item.Key.Name}: {item.Value}");
    }

    public Order Order()
    {
        RemoveGoods();
        return new Order(new Dictionary<Good, int>(_cartSpace));
        
    }

    private void RemoveGoods()
    {
        foreach (var good in _cartSpace.Keys)
        {
            int amount = _cartSpace[good];

            if (!_warehouse.HasEnough(good, amount))
                throw new ArgumentException($"Not enough {good.Name} in stock.");
            
            _warehouse.Remove(good, amount);
        }
    }
}

public class Order
{
    readonly private Dictionary<Good, int> _items;

    public Order(Dictionary<Good, int> items)
    {
        if (items == null)
            throw new ArgumentNullException($"{nameof(items)} is null");

        _items = items;
    }

    public string Paylink => "Payment link generated";
}
