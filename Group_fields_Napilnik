class Player
{
    public Player(string name, int age, Weapon weapon, Mover mover)
    {
        Name = name ?? throw new ArgumentNullException($"{nameof(name)} is null");

        if (age < 0)
        {
            throw new ArgumentOutOfRangeException($"Cooldown can't be zero. Current  amount is {age}");
        }

        Age = age;
        Weapon = weapon ?? throw new ArgumentNullException($"{nameof(weapon)} is null");
        Mover = mover ?? throw new ArgumentNullException($"{nameof(mover)} is null");
    }

    public string Name { get; private set; }

    public int Age { get; private set; }

    public Weapon Weapon { get; private set; }

    public Mover Mover { get; private set; }

    public void Move()
    {
        Mover.Move();
    }

    public void Attack()
    {
        Weapon.Attack();
    }
}

class Mover
{
    public Mover(float directionX, float directionY, float speed)
    {
        DirectionX = directionX;
        DirectionY = directionY;

        if (speed < 0)
        {
            throw new ArgumentOutOfRangeException($"Cooldown can't be zero. Current amount is {speed}");
        }

        Speed = speed;
    }

    public float DirectionX { get; private set; }

    public float DirectionY { get; private set; }

    public float Speed { get; private set; }

    public void Move()
    {
        //Do move
    }
}

class Weapon
{
    public Weapon(int damage, float cooldown)
    {
        if (cooldown < 0)
        {
            throw new ArgumentOutOfRangeException($"Cooldown can't be zero. Current amount is {cooldown}");
        }

        if (damage < 0)
        {
            throw new ArgumentOutOfRangeException($"Cooldown can't be zero. Current amount is {damage}");
        }

        Damage = damage;
        Cooldown = cooldown;
    }

    public int Damage { get; private set; }

    public float Cooldown { get; private set; }

    public void Attack()
    {
        //attack
        if(IsReloading())
            return;
    }

    public bool IsReloading()
    {
        throw new NotImplementedException();
    }
}
