namespace Lesson
{
    class Program
    {
        static void Main(string[] args)
        {
            Pathfinder consolePathfinder = new Pathfinder(new ConsoleLogWritter());
            Pathfinder filePathfinder = new Pathfinder(new FileLogWritter());
            Pathfinder secureConsolePathfinder = new Pathfinder(new FridayLogWritter(new ConsoleLogWritter(), DayOfWeek.Friday));
            Pathfinder secureFilePathfinder = new Pathfinder(new FridayLogWritter(new FileLogWritter(), DayOfWeek.Friday));
            Pathfinder secureConsoleFilePathfinder = new Pathfinder(new SecureFridayLogWritter(new ILogWriter[2] { new ConsoleLogWritter(), new FileLogWritter() }, DayOfWeek.Friday));
        }
    }

    public class Pathfinder
    {
        private ILogWriter _logWritter;

        public Pathfinder(ILogWriter consoleLogWritter)
        {
            _logWritter = consoleLogWritter ?? throw new ArgumentNullException($"{nameof(consoleLogWritter)} is null");
        }

        public void Find(string message)
        {
            _logWritter.WriteError(message);
        }
    }

    public interface ILogWriter
    {
        void WriteError(string message);
    }

    public class ConsoleLogWritter: ILogWriter
    {
        public  void WriteError(string message)
        {
            Console.WriteLine(message);
        }
    }

    public class FileLogWritter : ILogWriter
    {
        public void WriteError(string message)
        {
            File.WriteAllText("log.txt", message);
        }
    }

    public class FridayLogWritter : ILogWriter
    {
        private readonly ILogWriter _logger;
        private readonly DayOfWeek _dayOfWeek;

        public FridayLogWritter(ILogWriter logger, DayOfWeek dayOfWeek)
        {
            _logger = logger ?? throw new ArgumentNullException($"{nameof(logger)} is null");
            _dayOfWeek = dayOfWeek;
        }

        public void WriteError(string message)
        {
            if (DateTime.Now.DayOfWeek == _dayOfWeek)
            {
                _logger.WriteError(message);
            }
        }
    }

    public class SecureFridayLogWritter : ILogWriter
    {
        private readonly ILogWriter[] _loggers = new ILogWriter[2];
        private readonly DayOfWeek _dayOfWeek;

        public SecureFridayLogWritter(ILogWriter[] loggers, DayOfWeek dayOfWeek)
        {
            _loggers = loggers ?? throw new ArgumentNullException($"{nameof(loggers)} is null");
            _dayOfWeek = dayOfWeek;
        }

        public void WriteError(string message)
        {
            if (DateTime.Now.DayOfWeek == _dayOfWeek)
            {
                _loggers[0].WriteError(message);
            }

            _loggers[1].WriteError(message);
        }
    }
}
